{"name":"Git-fat","tagline":"Manage large binary files with git","body":"git-fat\r\n=======\r\n\r\nA tool for managing large binary files in git repositories.\r\n\r\nIntroduction\r\n------------\r\n\r\nChecking large binary files into a distributed version control system is a bad idea because repository size quickly\r\nbecomes unmanagable. Every operation takes longer to complete and fresh clones become something that you do start\r\ndoing overnight. Binary files do not have clean diffs and as a result do not compress well. Using `git-fat` allows\r\nyou to separate the storage of largefiles from the source while still having them in the working directory\r\nfor your project.\r\n\r\nFeatures\r\n--------\r\n\r\n- Cloning the source code remains fast because binaries are not included\r\n- Binary files really exist in your working directory and are not soft-links\r\n- Only depends on Python 2.7, rsync and ssh\r\n- Download only the files you need with pattern matching\r\n- Supports anonymous downloads of files over http\r\n\r\nInstallation\r\n------------\r\n\r\nYou can install `git-fat` using pip.\r\n\r\n    pip install git-fat\r\n\r\nOr you can install it simply by placing it on your path.\r\n\r\n    curl https://raw.github.com/cyaninc/git-fat/master/git_fat/git_fat.py \\\r\n    | sudo tee /usr/local/bin/git-fat && sudo chmod +x /usr/local/bin/git-fat\r\n\r\nUsage\r\n-----\r\n\r\nFirst, create a [`.gitattributes`](http://git-scm.com/book/en/Customizing-Git-Git-Attributes) file in the\r\nroot of your repository.  This file determines which files get converted to `git-fat` files.\r\n\r\n    cat >> .gitattributes <<EOF\r\n    *.deb filter=fat -crlf\r\n    *.gz filter=fat -crlf\r\n    *.zip filter=fat -crlf\r\n    EOF\r\n\r\nNext, create a `.gitfat` configuration file in the root of your repo that contains the location of the\r\nremote store for the binary files. Optionally include the ssh user and port if non-standard. Also,\r\noptionally include an http remote for anonymous clones.\r\n\r\n    [rsync]\r\n    remote = storage.example.com:/path/to/store\r\n    user = git\r\n    port = 2222\r\n    [http]\r\n    remote = http://storage.example.com/store\r\n\r\nCommit those files so that others will be able to use them.\r\n\r\nInitalize the repository.  This adds a line to `.git/config` telling git what command to run for the `fat`\r\nfilter is in the `.gitattributes` file.\r\n\r\n    git fat init\r\n\r\nNow when you add a file that matches a pattern in the `.gitattributes` file, it will be converted to a fat placeholder\r\nfile before getting commited to the repository. After you've added a file **remember to push it to the fat store**,\r\notherwise people won't get the binary file when they try to pull fat-files.\r\n\r\n    git fat push\r\n\r\nAfter we've done a new clone of a repository using `git-fat`, to get the additional files we do a fat pull.\r\n\r\n    git fat pull\r\n\r\nOr if you're doing an anonymous pull, and the repository managers support it.\r\n\r\n    git fat pull-http\r\n\r\nTo list the files managed by `git-fat`\r\n\r\n    git fat list\r\n\r\nTo get a summary of the orphan and stale files in the repository\r\n\r\n    git fat status\r\n\r\nOrphans are files that exist as placeholders in the working copy.  Stale files are files that are in the\r\n`.git/fat/objects` directory, but have no working copy associated with them (e.g. old versions of files).\r\n\r\nImplementation notes\r\n--------------------\r\n\r\nFor many commands, `git-fat` by default only checks the current `HEAD` for placeholder files to clone. This can\r\nsave on bandwidth for frequently changing large files and also saves on processing time for very large repositories.\r\nTo force commands to search the entire history for placeholders and pull all files, call `git-fat` with `-a`. e.g.\r\n\r\n    git fat -a pull\r\n\r\nIf you add `git-fat` to an existing repository, the default behavior is to not convert existing binary files to\r\n`git-fat`. Converting a file that already exists in the history for git would not save any space. Once the file is\r\nchanged or renamed, it will then be added to the fat store.\r\n\r\nTo setup an http server to accept `git-fat` requests, just configure a webserver to have a url serve up the `git-fat`\r\ndirectory on the server, and point the `.gitfat` http remote to that url.\r\n\r\nRelated projects\r\n----------------\r\n\r\n- [git-annex](http://git-annex.branchable.com) is a far more comprehensive solution, but was designed for a more\r\n    distributed use case and has more dependencies.\r\n- [git-media](https://github.com/schacon/git-media) adopts a similar approach to `git-fat`, but with a different\r\n    synchronization philosophy and with many Ruby dependencies.\r\n\r\nImprovements\r\n------------\r\n\r\n- More friendly configuration for multiple fat remotes\r\n- Private setting of a different remote.\r\n","google":"UA-46221113-1","note":"Don't delete this file! It's used internally to help with page regeneration."}