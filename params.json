{"name":"Git-fat","tagline":"Manage large binary files with git","body":"git-fat\r\n=======\r\n\r\nA tool for managing large binary files in git repositories.\r\n\r\nIntroduction\r\n------------\r\n\r\nChecking large binary files into a distributed version control system is\r\na bad idea because repository size quickly becomes unmanagable. Every\r\noperation takes longer to complete and fresh clones become something\r\nthat you do start doing overnight.\r\nUsing ``git-fat`` allows you to separate the storage of largefiles from\r\nthe source while still having them in the working directory for your project.\r\n\r\nFeatures\r\n--------\r\n\r\n-  Cloning the source code remains fast because binaries are not\r\n   included\r\n-  Binary files really exist in your working directory and are not\r\n   soft-links\r\n-  Only depends on Python 2.7, rsync and ssh\r\n-  Download only the files you need with pattern matching\r\n-  Supports anonymous downloads of files over http\r\n\r\nInstallation\r\n------------\r\n\r\nYou can install ``git-fat`` using pip.\r\n\r\n    pip install git-fat\r\n\r\nOr you can install it simply by placing it on your path.\r\n\r\n    curl https://raw.github.com/cyaninc/git-fat/master/git_fat/git_fat.py \\\r\n    | sudo tee /usr/local/bin/git-fat && sudo chmod +x /usr/local/bin/git-fat\r\n\r\nUsage\r\n-----\r\n\r\nFirst, create a\r\n[git attributes](http://git-scm.com/book/en/Customizing-Git-Git-Attributes)\r\nfile in the root of your repository. This file determines which files\r\nget converted to ``git-fat`` files.\r\n\r\n    cat >> .gitattributes <<EOF\r\n    *.deb filter=fat -crlf\r\n    *.gz filter=fat -crlf\r\n    *.zip filter=fat -crlf\r\n    EOF\r\n\r\nNext, create a ``.gitfat`` configuration file in the root of your repo\r\nthat contains the location of the remote store for the binary files.\r\nOptionally include the ssh user and port if non-standard. Also,\r\noptionally include an http remote for anonymous clones.\r\n\r\n    [rsync]\r\n    remote = storage.example.com:/path/to/store\r\n    user = git\r\n    port = 2222\r\n    [http]\r\n    remote = http://storage.example.com/store\r\n\r\nCommit those files so that others will be able to use them.\r\n\r\nInitalize the repository. This adds a line to ``.git/config`` telling\r\ngit what command to run for the ``fat`` filter is in the\r\n``.gitattributes`` file.\r\n\r\n    git fat init\r\n\r\nNow when you add a file that matches a pattern in the ``.gitattributes``\r\nfile, it will be converted to a fat placeholder file before getting\r\ncommited to the repository. After you've added a file **remember to push\r\nit to the fat store**, otherwise people won't get the binary file when\r\nthey try to pull fat-files.\r\n\r\n    git fat push\r\n\r\nAfter we've done a new clone of a repository using ``git-fat``, to get\r\nthe additional files we do a fat pull.\r\n\r\n    git fat pull\r\n\r\nOr if you're doing an anonymous pull, and the repository managers\r\nsupport it.\r\n\r\n    git fat pull-http\r\n\r\nTo list the files managed by ``git-fat``\r\n\r\n    git fat list\r\n\r\nTo get a summary of the orphan and stale files in the repository\r\n\r\n    git fat status\r\n\r\nOrphans are files that exist as placeholders in the working copy. Stale\r\nfiles are files that are in the ``.git/fat/objects`` directory, but have\r\nno working copy associated with them (e.g. old versions of files).\r\n\r\nTo find files over a certain size, use git fat find. This example finds\r\nall objects greater than 10MB in git's database and prints them out.\r\n\r\n    git fat find 10485760\r\n\r\nImplementation notes\r\n--------------------\r\n\r\nFor many commands, ``git-fat`` by default only checks the current\r\n``HEAD`` for placeholder files to clone. This can save on bandwidth for\r\nfrequently changing large files and also saves on processing time for\r\nvery large repositories. To force commands to search the entire history\r\nfor placeholders and pull all files, call ``git-fat`` with ``-a``. e.g.\r\n\r\n    git fat -a pull\r\n\r\nIf you add ``git-fat`` to an existing repository, the default behavior\r\nis to not convert existing binary files to ``git-fat``. Converting a\r\nfile that already exists in the history for git would not save any\r\nspace. Once the file is changed or renamed, it will then be added to the\r\nfat store.\r\n\r\nTo setup an http server to accept ``git-fat`` requests, just configure a\r\nwebserver to have a url serve up the ``git-fat`` directory on the\r\nserver, and point the ``.gitfat`` http remote to that url.\r\n\r\nRetroactive Import\r\n------------------\r\n\r\nYou can retroactively import a repository to ``git-fat`` using a combination\r\nof ``find`` and ``index-filter`` used with git's ``filter-branch`` command.\r\n\r\nBefore you do this, make sure you understand the consequences of\r\n[rewriting history](http://git-scm.com/book/ch6-4.html) and be sure to\r\nbackup your repository before starting.\r\n\r\nFirst, clone the repository and find all the large files with the\r\n``git fat find`` command.\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ git fat find 5123123\r\n    761a63bf287867da92eb420fca515363c4b02ad1 9437184 flowerpot.tar.gz\r\n    6c5d4031e03408e34ae476c5053ee497a91ac37b 10485760 whale.tar.gz\r\n\r\n\r\nReview the files and make sure that they're what you want to exclude from the\r\nrepository.  If the list looks good, put the filenames into another file that\r\nwill be read from during ``filter-branch``.\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ git fat find 5123123 | cut -d' ' -f3- > /tmp/towel\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ cat /tmp/towel\r\n    flowerpot.tar.gz\r\n    whale.tar.gz\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ ll\r\n    total 19M\r\n    drwxrwxr-x 3 darthurdent darthurdent 4.0K Dec 10 13:42 .\r\n    drwxrwxrwt 6 root         root          76K Dec 10 13:42 ..\r\n    drwxrwxr-x 6 darthurdent darthurdent 4.0K Dec 10 13:42 .git\r\n    -rw-r--r-- 1 darthurdent darthurdent 9.0M Dec 10 13:37 flowerpot.tar.gz\r\n    -rw-r--r-- 1 darthurdent darthurdent  10M Dec 10 13:37 whale.tar.gz\r\n\r\nDo the ``filter-branch`` using ``git fat index-filter`` as the index filter.\r\nPass in the filename containing the paths to files you want to exclude.\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ git filter-branch --index-filter 'git fat index-filter /tmp/towel'\\\r\n        --tag-name-filter cat -- --all\r\n    Rewrite 28cfba441aac92992c3f80dae97cd1c19b3befad (2/2)\r\n    Ref 'refs/heads/master' was rewritten\r\n\r\nReview the changes made to the repository.\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ ll\r\n    total 19M\r\n    drwxrwxr-x 3 darthurdent darthurdent 4.0K Dec 10 13:42 .\r\n    drwxrwxrwt 6 root         root          76K Dec 10 13:42 ..\r\n    drwxrwxr-x 6 darthurdent darthurdent 4.0K Dec 10 13:42 .git\r\n    -rw-rw-r-- 1 darthurdent darthurdent   64 Dec 10 13:42 .gitattributes\r\n    -rw-rw-r-- 1 darthurdent darthurdent 9.0M Dec 10 13:42 flowerpot.tar.gz\r\n    -rw-rw-r-- 1 darthurdent darthurdent  10M Dec 10 13:42 whale.tar.gz\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ cat .gitattributes\r\n    flowerpot.tar.gz filter=fat -text\r\n    whale.tar.gz filter=fat -text\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ git cat-file -p $(git hash-object whale.tar.gz)\r\n    #$# git-fat 8c206a1a87599f532ce68675536f0b1546900d7a             10485760\r\n\r\nRemove all the old and dangling references by doing a clone of the repository\r\nyou just cleaned.  The ``file://`` uri is\r\n[important](http://git-scm.com/book/ch4-1.html) here.\r\n\r\n    darthurdent at betelgeuse in /tmp/git-fat-demo (master)\r\n    $ cd .. && git clone file://git-fat-demo git-fat-clean\r\n\r\nRelated projects\r\n----------------\r\n\r\n-  [git-annex](http://git-annex.branchable.com) is a far more\r\n   comprehensive solution, but was designed for a more distributed use\r\n   case and has more dependencies.\r\n-  [git-media](https://github.com/schacon/git-media) adopts a similar\r\n   approach to ``git-fat``, but with a different synchronization\r\n   philosophy and with many Ruby dependencies.\r\n\r\nImprovements\r\n------------\r\n\r\n-  More friendly configuration for multiple fat remotes\r\n-  Private setting of a different remote. (e.g. local mirrors)\r\n-  Generic backend interface\r\n-  Better Documentation\r\n-  Improved Testing\r\n\r\n","google":"UA-46221113-1","note":"Don't delete this file! It's used internally to help with page regeneration."}